# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ric.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QLineEdit, QTableView, QHeaderView, QVBoxLayout, QPushButton, QMessageBox, QListView
from PyQt5.QtCore import Qt, QSortFilterProxyModel, QAbstractTableModel
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from lib.crawlers.csv_reader import csv_getter
from collections import OrderedDict
from main import *

params = OrderedDict()

def saver(dates_bool=True, dates=None, block_bool=False, block=None, indices_bool=False, indices=None, sat_bool=False, sat=None, ret=False):
    if dates_bool:
        params['dates'] = dates
    if block_bool:
        params['block'] = block
    if indices_bool:
        params['indices'] = indices
    if sat_bool:
        params['sat'] = sat
    if ret:
        return params


class Region(QWidget):
    def __init__(self, parent):
        super().__init__(parent)

    def viewClicked(self, clickedIndex):
        row = clickedIndex.row()
        print(row, type(row))
        saver(block_bool=True, block=row)
        print(params)
        # return row


class Ui_main_window(object):
    def __init__(self):
        self.indices = OrderedDict()
        self.indices['ndmi'] = False
        self.indices['ndvi'] = False
        self.indices['savi'] = False
        self.indices['msavi'] = False
        self.indices['ndwi'] = False
        self.dates = OrderedDict()
        self.dates['start'] = "MM/DD/YYYY"
        self.dates['end'] = "MM/DD/YYYY"
        self.satellite = "1"
        # print(self.indices)

    def setupUi(self, main_window):
        main_window.setObjectName("main_window")
        main_window.resize(870, 480)
        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")

        self.date_frame = QtWidgets.QFrame(self.centralwidget)
        self.date_frame.setEnabled(True)
        self.date_frame.setGeometry(QtCore.QRect(30, 70, 400, 111))
        self.date_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.date_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.date_frame.setObjectName("date_frame")

        self.start_date_label = QtWidgets.QLabel(self.date_frame)
        self.start_date_label.setGeometry(QtCore.QRect(90, 30, 71, 17))
        self.start_date_label.setObjectName("start_date_label")

        self.end_date_label = QtWidgets.QLabel(self.date_frame)
        self.end_date_label.setGeometry(QtCore.QRect(250, 30, 62, 17))
        self.end_date_label.setObjectName("end_date_label")

        self.start_lineEdit = QtWidgets.QLineEdit(self.date_frame)
        self.start_lineEdit.setGeometry(QtCore.QRect(80, 50, 91, 25))
        self.start_lineEdit.setObjectName("start_lineEdit")

        self.end_lineEdit = QtWidgets.QLineEdit(self.date_frame)
        self.end_lineEdit.setGeometry(QtCore.QRect(230, 50, 91, 25))
        self.end_lineEdit.setObjectName("end_lineEdit")

        self.dataset_frame = QtWidgets.QFrame(self.centralwidget)
        self.dataset_frame.setGeometry(QtCore.QRect(440, 70, 400, 111))
        self.dataset_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.dataset_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.dataset_frame.setObjectName("dataset_frame")

        self.satellite_selector = QtWidgets.QComboBox(self.dataset_frame)
        self.satellite_selector.setGeometry(QtCore.QRect(100, 60, 181, 25))
        self.satellite_selector.setObjectName("satellite_selector")
        self.satellite_selector.addItem("")
        self.satellite_selector.addItem("")
        self.satellite_selector.addItem("")
        self.satellite_selector.addItem("")

        self.ndmi = QtWidgets.QCheckBox(self.dataset_frame)
        self.ndmi.setGeometry(QtCore.QRect(10, 10, 61, 23))
        self.ndmi.setObjectName("ndmi")
        self.ndmi.stateChanged.connect(self.ndmi_clickBox)

        self.ndvi = QtWidgets.QCheckBox(self.dataset_frame)
        self.ndvi.setGeometry(QtCore.QRect(80, 10, 61, 23))
        self.ndvi.setObjectName("ndvi")
        self.ndvi.stateChanged.connect(self.ndvi_clickBox)

        self.savi = QtWidgets.QCheckBox(self.dataset_frame)
        self.savi.setGeometry(QtCore.QRect(150, 10, 61, 23))
        self.savi.setObjectName("savi")
        self.savi.stateChanged.connect(self.savi_clickBox)

        self.msavi = QtWidgets.QCheckBox(self.dataset_frame)
        self.msavi.setGeometry(QtCore.QRect(220, 10, 61, 23))
        self.msavi.setObjectName("msavi")
        self.msavi.stateChanged.connect(self.msavi_clickBox)

        self.ndwi = QtWidgets.QCheckBox(self.dataset_frame)
        self.ndwi.setGeometry(QtCore.QRect(300, 10, 61, 23))
        self.ndwi.setObjectName("ndwi")
        self.ndwi.stateChanged.connect(self.ndwi_clickBox)

        font = QtGui.QFont()
        font.setPointSize(21)
        self.RIC = QtWidgets.QLabel(self.centralwidget)
        self.RIC.setGeometry(QtCore.QRect(215, 16, 420, 41))
        self.RIC.setFont(font)
        self.RIC.setObjectName("RIC")

        self.region_widget = Region(self.centralwidget)
        self.region_widget.setGeometry(QtCore.QRect(30, 200, 810, 211))
        self.region_widget.setAutoFillBackground(False)
        self.region_widget.setObjectName("region_widget")

        self.region_tableView = QtWidgets.QTableView(self.region_widget)
        self.region_tableView.setGeometry(QtCore.QRect(0, 0, 810, 171))
        self.region_tableView.setObjectName("region_tableView")

        # self.region_select_push = QtWidgets.QPushButton(self.region_widget)
        # self.region_select_push.setGeometry(QtCore.QRect(345, 180, 131, 25))
        # self.region_select_push.setObjectName("region_select_push")

        self.submit = QtWidgets.QPushButton(self.centralwidget)
        self.submit.setGeometry(QtCore.QRect(400, 390, 83, 25))
        # self.submit.setGeometry(QtCore.QRect(400, 430, 83, 25))
        self.submit.setObjectName("submit")
        self.submit.clicked.connect(self.submitter)

        main_window.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(main_window)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 444, 22))
        self.menubar.setObjectName("menubar")

        main_window.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(main_window)
        self.statusbar.setObjectName("statusbar")

        main_window.setStatusBar(self.statusbar)

        self.retranslateUi(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslateUi(self, main_window):
        _translate = QtCore.QCoreApplication.translate

        main_window.setWindowTitle(_translate("main_window", "MainWindow"))

        self.start_date_label.setText(_translate("main_window", "Start Date"))
        self.end_date_label.setText(_translate("main_window", "End Date"))
        self.start_lineEdit.setText(_translate("main_window", "MM/DD/YYYY"))
        self.end_lineEdit.setText(_translate("main_window", "MM/DD/YYYY"))

        self.submit.setText(_translate("main_window", "Submit"))

        self.satellite_selector.setItemText(0, _translate("main_window", "Landsat - 8"))
        self.satellite_selector.setItemText(1, _translate("main_window", "Landsat - 7"))
        self.satellite_selector.setItemText(2, _translate("main_window", "Landsat - 5"))
        self.satellite_selector.setItemText(3, _translate("main_window", "Sentinel - 2"))

        self.ndwi.setText(_translate("main_window", "NDWI"))
        self.msavi.setText(_translate("main_window", "MSAVI"))
        self.ndvi.setText(_translate("main_window", "NDVI"))
        self.ndmi.setText(_translate("main_window", "NDMI"))
        self.savi.setText(_translate("main_window", "SAVI"))

        self.RIC.setText(_translate("main_window", "RASTER IMAGE CALCULATOR"))

        # self.region_select_push.setText(_translate("main_window", "Select Region"))

        regions = csv_getter(path='./subdist_boundingBox.csv', just_get=True)
        model = QStandardItemModel(len(regions), 1)
        model.setHorizontalHeaderLabels(['Regions'])

        for row, company in enumerate(regions):
            item = QStandardItem(company)
            model.setItem(row, 0, item)

        filter_proxy_model = QSortFilterProxyModel()
        filter_proxy_model.setSourceModel(model)
        filter_proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
        filter_proxy_model.setFilterKeyColumn(0)

        self.region_tableView.setStyleSheet('font-size: 15px;')
        self.region_tableView.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.region_tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.region_tableView.setModel(filter_proxy_model)
        self.region_tableView.clicked.connect(self.region_widget.viewClicked)
        # mainLayout.addWidget(self.table)

    def ndmi_clickBox(self, state):
        if state == QtCore.Qt.Checked:
            print('Checked')
            self.indices['ndmi'] = True
        else:
            print('Unchecked')
            self.indices['ndmi'] = False

    def ndvi_clickBox(self, state):
        if state == QtCore.Qt.Checked:
            print('Checked')
            self.indices['ndvi'] = True
        else:
            print('Unchecked')
            self.indices['ndvi'] = False

    def savi_clickBox(self, state):
        if state == QtCore.Qt.Checked:
            print('Checked')
            self.indices['savi'] = True
        else:
            print('Unchecked')
            self.indices['savi'] = False

    def msavi_clickBox(self, state):
        if state == QtCore.Qt.Checked:
            print('Checked')
            self.indices['msavi'] = True
        else:
            print('Unchecked')
            self.indices['msavi'] = False

    def ndwi_clickBox(self, state):
        if state == QtCore.Qt.Checked:
            print('Checked')
            self.indices['ndwi'] = True
        else:
            print('Unchecked')
            self.indices['ndwi'] = False

    def date_updater(self):
        self.dates['start'] = self.start_lineEdit.text()
        self.dates['end'] = self.end_lineEdit.text()

    def satellite_mapper(self):
        if self.satellite_selector.currentText() == "Landsat - 8":
            self.satellite = "1"
        if self.satellite_selector.currentText() == "Landsat - 7":
            self.satellite = "2"
        if self.satellite_selector.currentText() == "Landsat - 5":
            self.satellite = "3"
        if self.satellite_selector.currentText() == "Sentinel - 2":
            self.satellite = "4"

    def submitter(self):
        self.date_updater()
        self.satellite_mapper()
        saver(dates_bool=True, dates=[self.dates[key] for key in self.dates], indices_bool=True, indices=[self.indices[key] for key in self.indices]
              , sat_bool=True, sat=self.satellite)
        print(params)
        self.running_warning()
        downloader(sat_choice=params['sat'], block=params['block'], dates=params['dates'], indice_requested=params['indices'])

    def running_warning(self):
        run_warn = QMessageBox()
        run_warn.setWindowTitle("WARNING")
        run_warn.setText("DO NOT CLOSE THE PROGRAM, YOUR REQUEST IS BEING PROCESSED")
        run_warn.setIcon(QMessageBox.Critical)

        x = run_warn.exec_()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QMainWindow()
    ui = Ui_main_window()
    ui.setupUi(main_window)
    main_window.show()
    sys.exit(app.exec_())
